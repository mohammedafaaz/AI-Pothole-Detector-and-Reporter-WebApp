#!/usr/bin/env python3
"""
Test script to verify email configuration
Run this to test if email sending works independently
"""

import os
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Email configuration
EMAIL_USER = os.getenv('EMAIL_USER')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')
SMTP_SERVER = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
SMTP_PORT = int(os.getenv('SMTP_PORT', 587))

def test_email_config():
    """Test email configuration"""
    print("Testing Email Configuration")
    print("=" * 40)
    print(f"EMAIL_USER: {EMAIL_USER}")
    print(f"EMAIL_PASSWORD: {'*' * len(EMAIL_PASSWORD) if EMAIL_PASSWORD else 'None'}")
    print(f"SMTP_SERVER: {SMTP_SERVER}")
    print(f"SMTP_PORT: {SMTP_PORT}")
    print("=" * 40)
    
    if not EMAIL_USER or not EMAIL_PASSWORD:
        print("‚ùå ERROR: Email credentials not found in .env file")
        return False
    
    return True

def send_test_email(recipient_email):
    """Send a test email"""
    try:
        # Create message
        msg = MIMEMultipart()
        msg['Subject'] = 'üß™ Pothole Detection System - Email Test'
        msg['From'] = EMAIL_USER
        msg['To'] = recipient_email
        
        # Email body
        body = """
        <html>
        <body>
            <h2>üß™ Email Test Successful!</h2>
            <p>This is a test email from your Pothole Detection System.</p>
            <p><strong>Configuration Status:</strong></p>
            <ul>
                <li>‚úÖ SMTP Connection: Working</li>
                <li>‚úÖ Authentication: Successful</li>
                <li>‚úÖ Email Sending: Functional</li>
            </ul>
            <p>Your email system is ready to send pothole detection reports!</p>
            <hr>
            <p><small>Generated by test_email.py</small></p>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(body, 'html'))
        
        # Create secure connection and send
        context = ssl.create_default_context()
        print(f"Connecting to {SMTP_SERVER}:{SMTP_PORT}...")
        
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            print("Starting TLS...")
            server.starttls(context=context)
            
            print("Logging in...")
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            
            print(f"Sending test email to {recipient_email}...")
            server.send_message(msg)
            
        print("‚úÖ Test email sent successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Email sending failed: {str(e)}")
        return False

def main():
    """Main test function"""
    print("üöß Pothole Detection System - Email Test")
    print("=" * 50)
    
    # Test configuration
    if not test_email_config():
        return
    
    # Test sending to admin email
    admin_email = EMAIL_USER
    print(f"\nüìß Testing email to admin: {admin_email}")
    admin_success = send_test_email(admin_email)
    
    # Test sending to a different email if provided
    test_user_email = input(f"\nüìß Enter a test user email (or press Enter to skip): ").strip()
    user_success = True
    
    if test_user_email and '@' in test_user_email:
        print(f"üìß Testing email to user: {test_user_email}")
        user_success = send_test_email(test_user_email)
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä TEST RESULTS:")
    print(f"Admin Email ({admin_email}): {'‚úÖ SUCCESS' if admin_success else '‚ùå FAILED'}")
    if test_user_email:
        print(f"User Email ({test_user_email}): {'‚úÖ SUCCESS' if user_success else '‚ùå FAILED'}")
    
    if admin_success and user_success:
        print("\nüéâ All email tests passed! Your system is ready.")
    else:
        print("\n‚ö†Ô∏è  Some email tests failed. Check your configuration.")
        print("\nTroubleshooting tips:")
        print("1. Verify Gmail App Password is correct")
        print("2. Check if 2-factor authentication is enabled")
        print("3. Ensure 'Less secure app access' is enabled (if not using App Password)")
        print("4. Check internet connection")

if __name__ == "__main__":
    main()
